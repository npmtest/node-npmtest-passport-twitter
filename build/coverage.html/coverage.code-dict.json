{"/home/travis/build/npmtest/node-npmtest-passport-twitter/test.js":"/* istanbul instrument in package npmtest_passport_twitter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-passport-twitter/lib.npmtest_passport_twitter.js":"/* istanbul instrument in package npmtest_passport_twitter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_passport_twitter = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_passport_twitter = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-passport-twitter/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-passport-twitter && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_passport_twitter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_passport_twitter\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_passport_twitter.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_passport_twitter.rollup.js'] =\n            local.assetsDict['/assets.npmtest_passport_twitter.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_passport_twitter.__dirname + '/lib.npmtest_passport_twitter.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-passport-twitter/node_modules/passport-twitter/lib/index.js":"// Load modules.\nvar Strategy = require('./strategy');\n\n\n// Expose Strategy.\nexports = module.exports = Strategy;\n\n// Exports.\nexports.Strategy = Strategy;\n","/home/travis/build/npmtest/node-npmtest-passport-twitter/node_modules/passport-twitter/lib/strategy.js":"// Load modules.\nvar OAuthStrategy = require('passport-oauth1')\n  , util = require('util')\n  , uri = require('url')\n  , XML = require('xtraverse')\n  , Profile = require('./profile')\n  , InternalOAuthError = require('passport-oauth1').InternalOAuthError\n  , APIError = require('./errors/apierror');\n\n\n/**\n * `Strategy` constructor.\n *\n * The Twitter authentication strategy authenticates requests by delegating to\n * Twitter using the OAuth protocol.\n *\n * Applications must supply a `verify` callback which accepts a `token`,\n * `tokenSecret` and service-specific `profile`, and then calls the `cb`\n * callback supplying a `user`, which should be set to `false` if the\n * credentials are not valid.  If an exception occured, `err` should be set.\n *\n * Options:\n *   - `consumerKey`     identifies client to Twitter\n *   - `consumerSecret`  secret used to establish ownership of the consumer key\n *   - `callbackURL`     URL to which Twitter will redirect the user after obtaining authorization\n *\n * Examples:\n *\n *     passport.use(new TwitterStrategy({\n *         consumerKey: '123-456-789',\n *         consumerSecret: 'shhh-its-a-secret'\n *         callbackURL: 'https://www.example.net/auth/twitter/callback'\n *       },\n *       function(token, tokenSecret, profile, cb) {\n *         User.findOrCreate(..., function (err, user) {\n *           cb(err, user);\n *         });\n *       }\n *     ));\n *\n * @constructor\n * @param {object} options\n * @param {function} verify\n * @access public\n */\nfunction Strategy(options, verify) {\n  options = options || {};\n  options.requestTokenURL = options.requestTokenURL || 'https://api.twitter.com/oauth/request_token';\n  options.accessTokenURL = options.accessTokenURL || 'https://api.twitter.com/oauth/access_token';\n  options.userAuthorizationURL = options.userAuthorizationURL || 'https://api.twitter.com/oauth/authenticate';\n  options.sessionKey = options.sessionKey || 'oauth:twitter';\n  \n  OAuthStrategy.call(this, options, verify);\n  this.name = 'twitter';\n  this._userProfileURL = options.userProfileURL || 'https://api.twitter.com/1.1/account/verify_credentials.json';\n  this._skipExtendedUserProfile = (options.skipExtendedUserProfile !== undefined) ? options.skipExtendedUserProfile : false;\n  this._includeEmail = (options.includeEmail !== undefined) ? options.includeEmail : false;\n  this._includeStatus = (options.includeStatus !== undefined) ? options.includeStatus : true;\n  this._includeEntities = (options.includeEntities !== undefined) ? options.includeEntities : true;\n}\n\n// Inherit from `OAuthStrategy`.\nutil.inherits(Strategy, OAuthStrategy);\n\n\n/**\n * Authenticate request by delegating to Twitter using OAuth.\n *\n * @param {http.IncomingMessage} req\n * @param {object} [options]\n * @access protected\n */\nStrategy.prototype.authenticate = function(req, options) {\n  // When a user denies authorization on Twitter, they are presented with a link\n  // to return to the application in the following format (where xxx is the\n  // value of the request token):\n  //\n  //     http://www.example.com/auth/twitter/callback?denied=xxx\n  //\n  // Following the link back to the application is interpreted as an\n  // authentication failure.\n  if (req.query && req.query.denied) {\n    return this.fail();\n  }\n  \n  // Call the base class for standard OAuth authentication.\n  OAuthStrategy.prototype.authenticate.call(this, req, options);\n};\n\n/**\n * Retrieve user profile from Twitter.\n *\n * This function constructs a normalized profile, with the following properties:\n *\n *   - `id`        (equivalent to `user_id`)\n *   - `username`  (equivalent to `screen_name`)\n *\n * Note that because Twitter supplies basic profile information in query\n * parameters when redirecting back to the application, loading of Twitter\n * profiles *does not* result in an additional HTTP request, when the\n * `skipExtendedUserProfile` option is enabled.\n *\n * @param {string} token\n * @param {string} tokenSecret\n * @param {object} params\n * @param {function} done\n * @access protected\n */\nStrategy.prototype.userProfile = function(token, tokenSecret, params, done) {\n  if (!this._skipExtendedUserProfile) {\n    var json;\n    \n    var url = uri.parse(this._userProfileURL);\n    url.query = url.query || {};\n    if (url.pathname.indexOf('/users/show.json') == (url.pathname.length - '/users/show.json'.length)) {\n      url.query.user_id = params.user_id;\n    }\n    if (this._includeEmail == true) {\n      url.query.include_email = true;\n    }\n    if (this._includeStatus == false) {\n      url.query.skip_status = true;\n    }\n    if (this._includeEntities == false) {\n      url.query.include_entities = false;\n    }\n    \n    this._oauth.get(uri.format(url), token, tokenSecret, function (err, body, res) {\n      if (err) {\n        if (err.data) {\n          try {\n            json = JSON.parse(err.data);\n          } catch (_) {}\n        }\n        \n        if (json && json.errors && json.errors.length) {\n          var e = json.errors[0];\n          return done(new APIError(e.message, e.code));\n        }\n        return done(new InternalOAuthError('Failed to fetch user profile', err));\n      }\n      \n      try {\n        json = JSON.parse(body);\n      } catch (ex) {\n        return done(new Error('Failed to parse user profile'));\n      }\n      \n      var profile = Profile.parse(json);\n      profile.provider = 'twitter';\n      profile._raw = body;\n      profile._json = json;\n      // NOTE: The \"X-Access-Level\" header is described here:\n      //       https://dev.twitter.com/oauth/overview/application-permission-model\n      //       https://dev.twitter.com/oauth/overview/application-permission-model-faq\n      profile._accessLevel = res.headers['x-access-level'];\n  \n      done(null, profile);\n    });\n  } else {\n    var profile = { provider: 'twitter' };\n    profile.id = params.user_id;\n    profile.username = params.screen_name;\n\n    done(null, profile);\n  }\n};\n\n/**\n * Return extra Twitter-specific parameters to be included in the user\n * authorization request.\n *\n * @param {object} options\n * @return {object}\n * @access protected\n */\nStrategy.prototype.userAuthorizationParams = function(options) {\n  var params = {};\n  if (options.forceLogin) {\n    params.force_login = options.forceLogin;\n  }\n  if (options.screenName) {\n    params.screen_name = options.screenName;\n  }\n  return params;\n};\n\n/**\n * Parse error response from Twitter OAuth endpoint.\n *\n * @param {string} body\n * @param {number} status\n * @return {Error}\n * @access protected\n */\nStrategy.prototype.parseErrorResponse = function(body, status) {\n  var json, xml;\n  \n  try {\n    json = JSON.parse(body);\n    if (Array.isArray(json.errors) && json.errors.length > 0) {\n      return new Error(json.errors[0].message);\n    }\n  } catch (ex) {\n    xml = XML(body)\n    return new Error(xml.children('error').t() || body);\n  }\n};\n\n\n// Expose constructor.\nmodule.exports = Strategy;\n","/home/travis/build/npmtest/node-npmtest-passport-twitter/node_modules/passport-twitter/lib/profile.js":"/**\n * Parse profile.\n *\n * @param {object|string} json\n * @return {object}\n * @api public\n */\nexports.parse = function(json) {\n  if ('string' == typeof json) {\n    json = JSON.parse(json);\n  }\n  \n  var profile = {};\n  profile.id = String(json.id);\n  if (json.id_str) { profile.id = json.id_str; }\n  profile.username = json.screen_name;\n  profile.displayName = json.name;\n  if (json.email) {\n    profile.emails = [{ value: json.email }];\n  }\n  profile.photos = [{ value: json.profile_image_url_https }];\n  \n  return profile;\n};\n","/home/travis/build/npmtest/node-npmtest-passport-twitter/node_modules/passport-twitter/lib/errors/apierror.js":"/**\n * `APIError` error.\n *\n * References:\n *   - https://dev.twitter.com/overview/api/response-codes\n *\n * @constructor\n * @param {string} [message]\n * @param {number} [code]\n * @access public\n */\nfunction APIError(message, code) {\n  Error.call(this);\n  Error.captureStackTrace(this, arguments.callee);\n  this.name = 'APIError';\n  this.message = message;\n  this.code = code;\n  this.status = 500;\n}\n\n// Inherit from `Error`.\nAPIError.prototype.__proto__ = Error.prototype;\n\n\n// Expose constructor.\nmodule.exports = APIError;\n"}